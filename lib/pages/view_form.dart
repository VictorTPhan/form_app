import 'dart:collection';
import 'dart:convert';
import 'package:animate_do/animate_do.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_fast_forms/flutter_fast_forms.dart';
import 'package:form_app/forms/generated_form.dart';
import 'package:form_app/pages/response.dart';
import 'package:form_app/questions/checkbox_question.dart';
import 'package:form_app/questions/long_answer_question.dart';
import 'package:form_app/questions/multiple_choice_question.dart';
import 'package:form_app/questions/question.dart';
import 'package:form_app/questions/short_answer_question.dart';
import 'package:get_storage/get_storage.dart';
import 'package:http/http.dart' as http;
import 'package:uuid/uuid.dart';
import '../misc.dart';

class ViewForm extends StatefulWidget {
  ViewForm({super.key, required this.generatedForm});

  GeneratedForm generatedForm;

  @override
  State<ViewForm> createState() => _ViewFormState();
}

class _ViewFormState extends State<ViewForm> {

  /// The [GlobalKey] used by this page's [FastForm].
  final formKey = GlobalKey<FormState>();

  /// Whether or not the current [FastForm] has been validated.
  bool formValidated = false;

  /// A representation of the form's responses as a [String].
  /// This is intended to be a [String] version of the [Map]
  /// generated by the form every time it is updated by the user.
  String currentFormResponseString = "";

  /// The amount of extra time it takes for a question on this page to load,
  /// in milliseconds.
  int delayIncrease = 200;

  /// The amount of time it takes for a question on this page to load, in
  /// milliseconds. Every newly loaded question widget increases this value.
  late int delay = -delayIncrease;



  /// Determines if the [FastForm] associated with this page is validated, by
  /// taking in the [responses] [Map] generated by the [FastForm] every time
  /// it is modified by the user.
  bool isFormValidated(UnmodifiableMapView<String, dynamic> responses) {
    for (String question in responses.keys) {
      var response = responses[question];

      // Generic questions just need to check if the response is empty.
      if (response is String && response.isEmpty ||
          response is Set && response.isEmpty) {

        // If empty, the form is immediately invalid.
        return false;
      }
    }

    // If we reached this point, the form's fine.
    return true;
  }

  /// Creates a [FadeIn] widget that houses the [child] widget that fades in with
  /// a delay. The intended affect is for all widgets to use this function and to
  /// "cascade" downwards.
  Widget createWidgetWithDelay(Widget child) {
    delay += delayIncrease;

    return FadeInLeft(
      delay: Duration(milliseconds: delay),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: child,
      ),
    );
  }

  /// Creates a widget representing a question in the intended form.
  ///
  /// [question] - A [String] representing the question being asked.
  ///
  /// [formWidget] - A [Widget] representing an input method to answer the
  /// question.
  Widget createFormQuestion(String question, Widget formWidget) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        AnimatedTextKit(
          isRepeatingAnimation: false,
          animatedTexts: [
            TypewriterAnimatedText(
                speed: const Duration(milliseconds: 50),
                textStyle: standardTextStyle(),
                question
            ),
          ],
        ),
        formWidget
      ],
    );
  }

  /// Creates a widget representing an input widget for a [currentQuestion],
  /// determined based on the kind of question it is.
  Widget buildQuestion(Question currentQuestion) {
    Widget inputWidget;

    // Would have used a switch case.
    if (currentQuestion is ShortAnswerQuestion) {
      inputWidget = FastTextField(
        name: currentQuestion.question,
        minLines: 1,
        maxLines: 1,
      );
    } else if (currentQuestion is LongAnswerQuestion) {
      inputWidget = FastTextField(
        name: currentQuestion.question,
        minLines: 5,
        maxLines: 10,
      );
    } else if (currentQuestion is MultipleChoiceQuestion) {
      List<FastRadioOption> options = [];
      for (String option in currentQuestion.options) {
        options.add(
            FastRadioOption(
              title: Text(
                style: standardTextStyle(),
                option
              ),
              value: option
            )
        );
      }

      inputWidget = FastRadioGroup(
          name: currentQuestion.question,
          options: options
      );
    } else if (currentQuestion is CheckboxQuestion) {
      List<FastChoiceChip> options = [];
      for (String option in currentQuestion.options) {
        options.add(
            FastChoiceChip(
              selected: false,
              value: option,
            )
        );
      }

      inputWidget = FastChoiceChips(
          name: currentQuestion.question,
          chips: options
      );
    } else {
      inputWidget = Container();
    }

    // Increase the delay a little bit to have
    // a cascade effect.
    delay += delayIncrease;

    return createWidgetWithDelay(
      createFormQuestion(
        currentQuestion.question,
        inputWidget
      )
    );
  }

  /// Parses a [jsonResponse] representing a response sent from the backend into
  /// a usable format.
  void parseResponseJSON(dynamic jsonResponse) {
    final box = GetStorage();

    // generate a UUID for the response
    var uuidGenerator = const Uuid();
    var responseUUID = uuidGenerator.v4();

    // save the response
    box.write(responseUUID.toString(), jsonResponse);

    // add this response a list referencing this form
    String address = "${widget.generatedForm.uuid}/responses";
    List<dynamic> formResponses = box.read(address) ?? [];
    formResponses.add(responseUUID.toString());
    box.write(address, formResponses);

    // view the response
    navigateTo(context, ResponsePage(responseUUID: responseUUID));
  }

  /// Submits a form by connecting to the app's backend and parsing a returned
  /// JSON payload into a usable format.
  Future<void> submitForm() async {
    var url = Uri.parse('https://form-app-server-zibv.onrender.com/submit_form/');

    var payload = {
      "GOAL": widget.generatedForm.goal,
      "PROBLEM": widget.generatedForm.problem,
      "SOLUTION_TASK": widget.generatedForm.solutionTask,
      "RESPONSES": currentFormResponseString
    };
    var body = json.encode(payload);

    try {
      var response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
        },
        body: body,
      );
      if (response.statusCode == 200) {
        parseResponseJSON(json.decode(response.body));
      } else {
        print('Request failed with status: ${response.statusCode}');
      }
    } catch (e) {
      print('Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        toolbarHeight: 80,
        title: Text(
            style: standardTextStyle(fontSize: 25),
            widget.generatedForm.name
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              FastForm(
                formKey: formKey,
                children: List.generate(widget.generatedForm.questions.length, (index) => buildQuestion(widget.generatedForm.questions[index])).toList(),
                onChanged: (UnmodifiableMapView<String, dynamic> responses) {
                  setState(() {
                    formValidated = isFormValidated(responses);
                    currentFormResponseString = responses.toString();
                  });
                },
              ),
              if (formValidated)
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ElevatedButton(
                    onPressed: () {
                      submitForm();
                    },
                    child: Text(
                      style: standardTextStyle(),
                      "Let's Go"
                    )
                  ),
                )
            ]
          ),
        ),
      )
    );
  }
}
