import 'dart:collection';
import 'dart:convert';
import 'dart:math';
import 'package:animate_do/animate_do.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_fast_forms/flutter_fast_forms.dart';
import 'package:form_app/misc.dart';
import 'package:form_app/pages/view_form.dart';
import 'package:get_storage/get_storage.dart';
import 'package:http/http.dart' as http;
import 'package:uuid/uuid.dart';
import '../forms/generated_form.dart';

class CreateForm extends StatefulWidget {
  const CreateForm({super.key});

  @override
  State<CreateForm> createState() => _CreateFormState();
}

class _CreateFormState extends State<CreateForm> {

  /// The [GlobalKey] used by this page's [FastForm].
  final formKey = GlobalKey<FormState>();

  /// Whether or not the current [FastForm] has been validated.
  bool formValidated = false;

  /// A map of values outputted by the [FastForm] every time it is modified.
  UnmodifiableMapView<String, dynamic> currentFormResponse = UnmodifiableMapView({});

  /// A randomly selected example/placeholder text to be put inside of [TextField]s.
  late Map<String, String> example = examples[Random().nextInt(examples.length)];

  /// The amount of extra time it takes for a question on this page to load,
  /// in milliseconds.
  int delayIncrease = 200;

  /// The amount of time it takes for a question on this page to load, in
  /// milliseconds. Every newly loaded question widget increases this value.
  late int delay = -delayIncrease;




  /// Creates a [FadeIn] widget that houses the [child] widget that fades in with
  /// a delay. The intended affect is for all widgets to use this function and to
  /// "cascade" downwards.
  Widget createWidgetWithDelay(Widget child) {
    // Permanently increase the delay time.
    delay += delayIncrease;

    // Return a [FadeIn] widget housing the [child] widget.
    return FadeInLeft(
      delay: Duration(milliseconds: delay),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: child,
      ),
    );
  }

  /// Creates a widget representing a question in the intended form.
  ///
  /// [question] - A [String] representing the question being asked.
  ///
  /// [formWidget] - A [Widget] representing an input method to answer the
  /// question.
  Widget createFormQuestion(String question, Widget formWidget) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        AnimatedTextKit(
          isRepeatingAnimation: false,
          animatedTexts: [
            TypewriterAnimatedText(
              speed: const Duration(milliseconds: 50),
              textStyle: standardTextStyle(),
              question
            ),
          ],
        ),
        formWidget
      ],
    );
  }

  /// Determines if the [FastForm] associated with this page is validated, by
  /// taking in the [responses] [Map] generated by the [FastForm] every time
  /// it is modified by the user.
  bool isFormValidated(UnmodifiableMapView<String, dynamic> responses) {
    for (String question in responses.keys) {
      var response = responses[question];
      
      // Special case "FORM_LENGTH" cannot be 0
      if (question == "FORM_LENGTH") {

        // Check if the response is parse-able
        dynamic parseResult = int.tryParse(response);
        if (parseResult == null || parseResult <= 0) {

          // If nonnumerical or non-positive, the form is immediately invalid
          return false;
        }
      }

      // Generic questions just need to check if the response is empty.
      if (response is String && response.isEmpty ||
          response is Set && response.isEmpty) {
        
        // If empty, the form is immediately invalid.
        return false;
      }
    }
    
    // If we reached this point, the form's fine.
    return true;
  }

  /// Parses a [jsonResponse] representing a form sent from the backend into
  /// a usable format.
  void parseFormJSON(dynamic jsonResponse) {
    // Add extra fields to the JSON.
    jsonResponse["GOAL"] = currentFormResponse["GOAL"].toString();
    jsonResponse["PROBLEM"] = currentFormResponse["PROBLEM"].toString();
    jsonResponse["FORM_LENGTH"] = currentFormResponse["FORM_LENGTH"].toString();
    jsonResponse["SOLUTION_TASK"] = currentFormResponse["SOLUTION_TASK"].toString();
    jsonResponse["ALLOWED_TYPES"] = currentFormResponse["ALLOWED_TYPES"].toList();
    // The color index is a random gradient.
    jsonResponse["COLOR_INDEX"] = Random().nextInt(gradients.length);

    // Create a UUID to associate with this form
    var uuidGenerator = const Uuid();
    var uuid = uuidGenerator.v4();
    jsonResponse["UUID"] = uuid.toString();

    // Save a copy of this form on disk, casted as a Map
    final box = GetStorage();
    box.write(uuid.toString(), jsonResponse as Map<String, dynamic>);

    // Add the form's UID to a list of saved forms, so we can load it from the
    // home page.
    List<dynamic> savedForms = box.read("SAVED_FORMS") ?? [];
    savedForms.add(uuid.toString());
    box.write("SAVED_FORMS", savedForms);

    // Generate a [GeneratedForm] object and send the user to the next page.
    var generatedForm = GeneratedForm.fromJson(jsonResponse);
    navigateTo(context, ViewForm(generatedForm: generatedForm));
  }

  /// Creates a form by connecting to the app's backend and parsing a returned
  /// JSON payload into a usable format.
  Future<void> createForm() async {
    var url = Uri.parse('$backendURL/create_form/');

    // Generate the payload and encode it into JSON.
    var payload = {
      "GOAL": currentFormResponse["GOAL"].toString(),
      "PROBLEM": currentFormResponse["PROBLEM"].toString(),
      "FORM_LENGTH": currentFormResponse["FORM_LENGTH"].toString(),
      "ALLOWED_TYPES": currentFormResponse["ALLOWED_TYPES"].toString(),
      "SOLUTION_TASK": currentFormResponse["SOLUTION_TASK"].toString()
    };
    var body = json.encode(payload);

    try {
      // Send the POST request.
      var response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
        },
        body: body,
      );

      if (response.statusCode == 200) {
        parseFormJSON(json.decode(response.body));
      } else {
        print('Request failed with status: ${response.statusCode}');
      }
    } catch (e) {
      print('Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          toolbarHeight: 80,
          title: Text(
            style: standardTextStyle(fontSize: 25),
            "Let's Get Started"
          ),
        ),
        body: SafeArea(
          child: SingleChildScrollView(
            child: Column(
                children: [
                  FastForm(
                    formKey: formKey,
                    children: [
                      createWidgetWithDelay(
                        createFormQuestion(
                          "You are trying to...",
                          FastTextField(
                            name: "GOAL",
                            placeholder: example["goal"],
                            minLines: 1,
                            maxLines: 1,
                          ),
                        )
                      ),
                      createWidgetWithDelay(
                          createFormQuestion(
                            "What's the problem?",
                            FastTextField(
                              name: "PROBLEM",
                              placeholder: example["problem"],
                              minLines: 1,
                              maxLines: 1,
                            ),
                          )
                      ),
                      createWidgetWithDelay(
                          createFormQuestion(
                            "What do you need?",
                            FastTextField(
                              name: "SOLUTION_TASK",
                              placeholder: example["task"],
                              minLines: 1,
                              maxLines: 1,
                            ),
                          )
                      ),
                      createWidgetWithDelay(
                          createFormQuestion(
                            "How many questions do you want to answer?",
                            const FastTextField(
                              name: "FORM_LENGTH",
                              placeholder: "5",
                              keyboardType: TextInputType.number,
                              minLines: 1,
                              maxLines: 1,
                            ),
                          )
                      ),
                      createWidgetWithDelay(
                          createFormQuestion(
                            "What kind of questions do you want to answer?",
                              FastChoiceChips(
                                  name: "ALLOWED_TYPES",
                                  chips: [
                                    FastChoiceChip(
                                      selected: true,
                                      label: Text(
                                          style: standardTextStyle(),
                                          "Short Answer"
                                      ),
                                      value: "SHORT_ANSWER_RESPONSE",
                                    ),
                                    FastChoiceChip(
                                      selected: true,
                                      label: Text(
                                          style: standardTextStyle(),
                                          "Long Answer"
                                      ),
                                      value: "LONG_ANSWER_RESPONSE",
                                    ),
                                    FastChoiceChip(
                                      selected: true,
                                      label: Text(
                                          style: standardTextStyle(),
                                          "Multiple Choice"
                                      ),
                                      value: "MULTIPLE_CHOICE",
                                    ),
                                    FastChoiceChip(
                                      selected: true,
                                      label: Text(
                                          style: standardTextStyle(),
                                          "Checkbox"
                                      ),
                                      value: "CHECKBOX",
                                    )
                                  ]
                              )
                          )
                      ),
                    ],
                    onChanged: (UnmodifiableMapView<String, dynamic> responses) {
                      setState(() {
                        formValidated = isFormValidated(responses);
                        currentFormResponse = responses;
                      });
                    },
                  ),
                  if (formValidated)
                    ElevatedButton(
                        onPressed: () {
                          createForm();
                        },
                        child: Text(
                          style: standardTextStyle(),
                          "Let's Go"
                        )
                    )
                ]
            ),
          ),
        )
    );
  }
}
